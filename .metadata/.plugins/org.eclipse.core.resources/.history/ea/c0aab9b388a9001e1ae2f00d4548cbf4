package Test;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

class FireworkParticle {
    private int x;
    private int y;
    private int speed;
    private Color color;

    public FireworkParticle(int x, int y, Color color) {
        this.x = x;
        this.y = y;
        this.speed = 3;
        this.color = color;
    }

    public void update() {
        y -= speed;
    }

    public void draw(Graphics g) {
        g.setColor(color);
        g.fillOval(x, y, 5, 5);
    }

	public int getY() {
		// TODO Auto-generated method stub
		return y;
	}

	public void updateVelocity(int xSpeed, int ySpeed) {
	    this.speed = xSpeed;
	    this.speed = ySpeed;
	}
}

class Firework extends JPanel {
    private List<FireworkParticle> particles;
    private Timer timer;
    private Random random;

    public Firework() {
        particles = new ArrayList<>();
        random = new Random();

        timer = new Timer(30, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateParticles();
                repaint();
            }
        });
    }

    public void launchFirework() {
        int startX = getWidth() / 2;
        int startY = getHeight();

        particles.clear();

        for (int i = 0; i < 100; i++) {
            int angle = random.nextInt(360);
            double radians = Math.toRadians(angle);
            int speed = random.nextInt(5) + 3;

            int xSpeed = (int) (speed * Math.cos(radians));
            int ySpeed = (int) (speed * Math.sin(radians));

            FireworkParticle particle = new FireworkParticle(startX, startY, getRandomColor());
            particle.update();
            particle.update(); // Move it twice to give it an initial velocity
            particle.updateVelocity(xSpeed, ySpeed);

            particles.add(particle);
        }

        timer.start();
    }

    private Color getRandomColor() {
        int r = random.nextInt(256);
        int g = random.nextInt(256);
        int b = random.nextInt(256);
        return new Color(r, g, b);
    }

    private void updateParticles() {
        for (FireworkParticle particle : particles) {
            particle.update();
        }

        particles.removeIf(p -> p.getY() < 0); // Remove particles that have gone off the screen

        if (particles.isEmpty()) {
            timer.stop();
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (FireworkParticle particle : particles) {
            particle.draw(g);
        }
    }
}

public class FireworkDisplay extends JFrame {
    private Firework firework;

    public FireworkDisplay() {
        setTitle("Firework Display");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        firework = new Firework();
        add(firework);

        JButton launchButton = new JButton("Launch Firework");
        launchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                firework.launchFirework();
            }
        });

        JPanel controlPanel = new JPanel();
        controlPanel.add(launchButton);
        add(controlPanel, BorderLayout.SOUTH);

        setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new FireworkDisplay();
        });
    }
}
