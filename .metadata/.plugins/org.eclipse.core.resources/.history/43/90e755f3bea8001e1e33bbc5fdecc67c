package Test;

import javax.swing.*;
import java.awt.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import Client.ListClientComponent;

class CustomPanelListCellRenderer extends DefaultListCellRenderer {
    @Override
    public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        Component renderer = (Component) value;

        if (isSelected && (index + 1) % 2 == 0) {
            renderer.setBackground(new Color(91, 150, 247));
            setPanelForeground(renderer, Color.white);
        } else {
            renderer.setBackground(Color.white);
            setPanelForeground(renderer, Color.black);
        }

        return renderer;
    }

    protected void setPanelForeground(Component panel, Color color) {
        if (panel instanceof JPanel) {
            Component[] components = ((JPanel) panel).getComponents();
            for (Component component : components) {
                if (component instanceof JLabel) {
                    ((JLabel) component).setForeground(color);
                }
            }
        }
    }
}

public class SpacedJPanelListExample extends JFrame {

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                SpacedJPanelListExample frame = new SpacedJPanelListExample();
                frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    private Component createSpacer(JList<Component> list) {
        JPanel spacer = new JPanel();
        spacer.setPreferredSize(new Dimension(0, 24));
        spacer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                // Get the index of the selected cell
                int selectedIndex = list.getSelectedIndex();
                // Add a new cell after the selected cell
                ((DefaultListModel<Component>) list.getModel()).add(selectedIndex + 1, new ListClientComponent());
                // Reset the selection to the newly added cell
                list.setSelectedIndex(selectedIndex + 1);
            }
        });
        return spacer;
    }

    public SpacedJPanelListExample() {
        setSize(1024, 900);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(null);

        JPanel p = new JPanel();
        p.setBounds(0, 0, 325, 760);
        p.setLayout(new FlowLayout());
        p.setBackground(new Color(248, 250, 255));
        add(p);

        JPanel p2 = new JPanel();
        p2.setBounds(325, 0, 337, 760);
        p2.setLayout(new BorderLayout());
        p2.setBackground(new Color(248, 250, 255));
        add(p2);

        DefaultListModel<Component> model = new DefaultListModel<>();
        JList<Component> list = new JList<>(model);
        list.setCellRenderer(new CustomPanelListCellRenderer());
        list.setBorder(BorderFactory.createEmptyBorder());
        list.setBackground(new Color(248, 250, 255));
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        JScrollPane scrollPane = new JScrollPane(list);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.setPreferredSize(new Dimension(290, 760));
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        // Create a custom vertical scroll bar
        JScrollBar customScrollBar = new JScrollBar(JScrollBar.VERTICAL);
        customScrollBar.setModel(scrollPane.getVerticalScrollBar().getModel());
        customScrollBar.setPreferredSize(new Dimension(10, 760));
        customScrollBar.setForeground(new Color(48, 144, 216));
        customScrollBar.setBackground(new Color(248, 250, 255));
        customScrollBar.setUI(new ModernScrollBarUI());
        list.addMouseWheelListener(e -> customScrollBar.setValue(customScrollBar.getValue() + e.getWheelRotation() * 50));

        // Add ListSelectionListener to track cell selection
        list.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedIndex = list.getSelectedIndex();
                    if (selectedIndex >= 0) {
                        // Highlight the selected cell
                        list.setCellRenderer(new CustomPanelListCellRenderer() {
                            @Override
                            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                                Component renderer = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                                if (isSelected && index == selectedIndex) {
                                    renderer.setBackground(new Color(91, 150, 247));
                                    setPanelForeground(renderer, Color.white);
                                }
                                return renderer;
                            }
                        });
                    }
                }
            }
        });

        p.add(scrollPane);
        p.add(createSpacer(list));
        p2.add(customScrollBar, BorderLayout.WEST);
    }
}
